#include "RecurEyeWalker.h"
#include "Genome.h"
#include "CubeGene.h"
#include "AxonGene.h"
#include "NodeGene.h"
#include "Logger.h"
#include "utility.h"
#include "Shapes.h"
#include <limits>

#include "Scenario.h"
#include <numeric>

static constexpr double sight_distance = 400.0;
Genome* RecurEyeWalker::createGenome(Vec p, double l, std::vector<unsigned int> sizes, std::vector<unsigned int> sizes2) {
  // 1
  return new Genome("<MetaData>|a,0,0,0,0,0.420063|a,0,1,0,0,0.687784|a,0,2,0,0,-0.254708|a,0,3,0,0,0.718846|a,0,4,0,0,-0.453164|a,0,5,0,0,0.334362|a,0,6,0,0,-0.162064|a,0,7,0,0,-0.408915|a,0,8,0,0,0.232438|a,0,9,0,0,0.191498|a,0,10,0,0,0.685312|a,0,11,0,0,-0.983362|a,0,12,0,0,0.612766|a,0,13,0,0,0.431219|a,0,14,0,0,0.0483559|a,0,15,0,0,0.379093|a,1,0,0,0,-0.773392|a,1,1,0,0,0.583053|a,1,2,0,0,-0.00519792|a,1,3,0,0,-0.452463|a,1,4,0,0,-0.393087|a,1,5,0,0,-0.973426|a,1,6,0,0,0.620525|a,1,7,0,0,0.379932|a,1,8,0,0,0.778292|a,1,9,0,0,-0.655444|a,1,10,0,0,-0.37295|a,1,11,0,0,-0.0206714|a,1,12,0,0,0.67408|a,1,13,0,0,-0.879565|a,1,14,0,0,0.955905|a,1,15,0,0,-0.661512|a,2,0,0,0,-0.673464|a,2,1,0,0,-0.0543843|a,2,2,0,0,-0.754413|a,2,3,0,0,-0.0345751|a,2,4,0,0,-0.692485|a,2,5,0,0,-0.706441|a,2,6,0,0,0.211662|a,2,7,0,0,0.584657|a,2,8,0,0,0.360824|a,2,9,0,0,-0.114418|a,2,10,0,0,0.0946332|a,2,11,0,0,0.71085|a,2,12,0,0,0.101175|a,2,13,0,0,-0.000502881|a,2,14,0,0,-0.767482|a,2,15,0,0,0.48562|a,3,0,0,0,0.0984926|a,3,1,0,0,-0.708502|a,3,2,0,0,-0.75134|a,3,3,0,0,0.66341|a,3,4,0,0,0.753482|a,3,5,0,0,-0.429575|a,3,6,0,0,-0.610176|a,3,7,0,0,-0.160742|a,3,8,0,0,0.237906|a,3,9,0,0,-0.249248|a,3,10,0,0,-0.476208|a,3,11,0,0,-0.680952|a,3,12,0,0,0.143501|a,3,13,0,0,0.99656|a,3,14,0,0,0.663586|a,3,15,0,0,0.288387|a,0,0,1,0,-0.896273|a,0,1,1,0,-0.620004|a,1,0,1,0,0.11342|a,1,1,1,0,-0.247006|a,2,0,1,0,0.611123|a,2,1,1,0,0.492562|a,3,0,1,0,0.395304|a,3,1,1,0,0.397961|a,4,0,1,0,-0.274379|a,4,1,1,0,0.798957|a,5,0,1,0,0.00573515|a,5,1,1,0,0.379439|a,6,0,1,0,0.267684|a,6,1,1,0,0.0606665|a,7,0,1,0,0.542254|a,7,1,1,0,-0.327419|a,8,0,1,0,0.753362|a,8,1,1,0,0.065275|a,9,0,1,0,-0.252295|a,9,1,1,0,0.876419|a,10,0,1,0,-0.322335|a,10,1,1,0,0.509585|a,11,0,1,0,0.583369|a,11,1,1,0,0.360204|a,12,0,1,0,-0.629581|a,12,1,1,0,0.807533|a,13,0,1,0,0.611083|a,13,1,1,0,-0.102697|a,14,0,1,0,-0.866454|a,14,1,1,0,0.446801|a,15,0,1,0,0.130621|a,15,1,1,0,-0.725702|a,0,0,0,1,-0.978193|a,0,1,0,1,0.308716|a,0,2,0,1,0.909915|a,0,3,0,1,-0.768314|a,0,4,0,1,0.803627|a,0,5,0,1,0.475707|a,0,6,0,1,-0.743691|a,0,7,0,1,0.486187|a,1,0,0,1,-0.540601|a,1,1,0,1,0.357569|a,1,2,0,1,0.0645805|a,1,3,0,1,0.960164|a,1,4,0,1,-0.230355|a,1,5,0,1,0.573511|a,1,6,0,1,-0.289547|a,1,7,0,1,0.337014|a,2,0,0,1,0.849784|a,2,1,0,1,0.772594|a,2,2,0,1,0.924794|a,2,3,0,1,0.570466|a,2,4,0,1,0.900262|a,2,5,0,1,-0.316265|a,2,6,0,1,-0.228515|a,2,7,0,1,0.415779|a,0,0,1,1,0.978266|a,0,1,1,1,-0.755681|a,0,2,1,1,0.115424|a,0,3,1,1,0.388288|a,0,4,1,1,-0.510252|a,0,5,1,1,-0.962558|a,0,6,1,1,-0.625153|a,0,7,1,1,0.1942|a,1,0,1,1,0.625643|a,1,1,1,1,-0.600471|a,1,2,1,1,0.964643|a,1,3,1,1,-0.718484|a,1,4,1,1,0.592853|a,1,5,1,1,0.765049|a,1,6,1,1,-0.962049|a,1,7,1,1,0.553608|a,2,0,1,1,0.0832165|a,2,1,1,1,0.488419|a,2,2,1,1,0.0926097|a,2,3,1,1,0.13572|a,2,4,1,1,0.994319|a,2,5,1,1,-0.15644|a,2,6,1,1,-0.876079|a,2,7,1,1,-0.344102|a,3,0,1,1,0.443913|a,3,1,1,1,0.621971|a,3,2,1,1,-0.960774|a,3,3,1,1,-0.104868|a,3,4,1,1,-0.203134|a,3,5,1,1,-0.209052|a,3,6,1,1,-0.167024|a,3,7,1,1,0.544281|a,4,0,1,1,0.62022|a,4,1,1,1,-0.169691|a,4,2,1,1,0.12396|a,4,3,1,1,-0.991521|a,4,4,1,1,0.980215|a,4,5,1,1,-0.464064|a,4,6,1,1,0.335084|a,4,7,1,1,-0.212109|a,5,0,1,1,0.689347|a,5,1,1,1,0.640861|a,5,2,1,1,0.0684261|a,5,3,1,1,0.736949|a,5,4,1,1,0.19725|a,5,5,1,1,-0.17477|a,5,6,1,1,0.797039|a,5,7,1,1,-0.257868|a,6,0,1,1,-0.117894|a,6,1,1,1,-0.385947|a,6,2,1,1,-0.449064|a,6,3,1,1,0.666004|a,6,4,1,1,-0.0277956|a,6,5,1,1,-0.868406|a,6,6,1,1,-0.053791|a,6,7,1,1,0.511756|a,7,0,1,1,0.164944|a,7,1,1,1,0.0913385|a,7,2,1,1,-0.234849|a,7,3,1,1,-0.696989|a,7,4,1,1,0.425683|a,7,5,1,1,0.324897|a,7,6,1,1,0.922777|a,7,7,1,1,0.82424|a,0,0,2,1,-0.847485|a,0,1,2,1,-0.702026|a,1,0,2,1,0.978877|a,1,1,2,1,0.0283661|a,2,0,2,1,0.660167|a,2,1,2,1,0.0927858|a,3,0,2,1,0.39491|a,3,1,2,1,-0.660388|a,4,0,2,1,0.182697|a,4,1,2,1,-0.567815|a,5,0,2,1,-0.746706|a,5,1,2,1,-0.516029|a,6,0,2,1,-0.724853|a,6,1,2,1,0.987962|a,7,0,2,1,0.205002|a,7,1,2,1,0.411249|c,0,0,0,10");

  //6
  // return new Genome("<MetaData>|a,0,0,0,0,0.420063|a,0,1,0,0,0.687784|a,0,2,0,0,-0.254708|a,0,3,0,0,0.718846|a,0,4,0,0,-0.453164|a,0,5,0,0,0.334362|a,0,6,0,0,-0.162064|a,0,7,0,0,-0.408915|a,0,8,0,0,0.232438|a,0,9,0,0,0.191498|a,0,10,0,0,0.685312|a,0,11,0,0,-0.983362|a,0,12,0,0,0.612766|a,0,13,0,0,0.431219|a,0,14,0,0,0.0483559|a,0,15,0,0,0.379093|a,1,0,0,0,-0.773392|a,1,1,0,0,0.583053|a,1,2,0,0,-0.00519792|a,1,3,0,0,-0.452463|a,1,4,0,0,-0.393087|a,1,5,0,0,-0.973426|a,1,6,0,0,0.620525|a,1,7,0,0,0.379932|a,1,8,0,0,0.778292|a,1,9,0,0,-0.655444|a,1,10,0,0,-0.37295|a,1,11,0,0,-0.0206714|a,1,12,0,0,0.67408|a,1,13,0,0,-0.879565|a,1,14,0,0,0.955905|a,1,15,0,0,-0.661512|a,2,0,0,0,-0.673464|a,2,1,0,0,-0.0543843|a,2,2,0,0,-0.754413|a,2,3,0,0,-0.0345751|a,2,4,0,0,-0.692485|a,2,5,0,0,-0.706441|a,2,6,0,0,0.211662|a,2,7,0,0,0.584657|a,2,8,0,0,0.360824|a,2,9,0,0,-0.114418|a,2,10,0,0,0.0946332|a,2,11,0,0,0.71085|a,2,12,0,0,0.101175|a,2,13,0,0,-0.000502881|a,2,14,0,0,-0.767482|a,2,15,0,0,0.48562|a,3,0,0,0,0.0984926|a,3,1,0,0,-0.708502|a,3,2,0,0,-0.75134|a,3,3,0,0,0.66341|a,3,4,0,0,0.753482|a,3,5,0,0,-0.429575|a,3,6,0,0,-0.610176|a,3,7,0,0,-0.160742|a,3,8,0,0,0.237906|a,3,9,0,0,-0.249248|a,3,10,0,0,-0.476208|a,3,11,0,0,-0.680952|a,3,12,0,0,0.143501|a,3,13,0,0,0.99656|a,3,14,0,0,0.663586|a,3,15,0,0,0.288387|a,0,0,1,0,-0.896273|a,0,1,1,0,-0.620004|a,1,0,1,0,0.11342|a,1,1,1,0,-0.247006|a,2,0,1,0,0.611123|a,2,1,1,0,0.492562|a,3,0,1,0,0.395304|a,3,1,1,0,0.397961|a,4,0,1,0,-0.274379|a,4,1,1,0,0.798957|a,5,0,1,0,0.00573515|a,5,1,1,0,0.379439|a,6,0,1,0,0.267684|a,6,1,1,0,0.0606665|a,7,0,1,0,0.542254|a,7,1,1,0,-0.327419|a,8,0,1,0,0.753362|a,8,1,1,0,0.065275|a,9,0,1,0,-0.252295|a,9,1,1,0,0.876419|a,10,0,1,0,-0.322335|a,10,1,1,0,0.509585|a,11,0,1,0,0.583369|a,11,1,1,0,0.360204|a,12,0,1,0,-0.629581|a,12,1,1,0,0.807533|a,13,0,1,0,0.611083|a,13,1,1,0,-0.102697|a,14,0,1,0,-0.866454|a,14,1,1,0,0.446801|a,15,0,1,0,0.130621|a,15,1,1,0,-0.725702|a,0,0,0,1,-0.967193|a,0,1,0,1,0.325186|a,0,2,0,1,-0.850339|a,0,3,0,1,0.233965|a,0,4,0,1,0.491638|a,0,5,0,1,-0.610045|a,0,6,0,1,-0.282291|a,0,7,0,1,-0.894977|a,1,0,0,1,-0.67183|a,1,1,0,1,-0.797473|a,1,2,0,1,0.0834691|a,1,3,0,1,0.66197|a,1,4,0,1,-0.328231|a,1,5,0,1,-0.66509|a,1,6,0,1,0.967977|a,1,7,0,1,0.444752|a,2,0,0,1,0.4253|a,2,1,0,1,0.994233|a,2,2,0,1,0.925581|a,2,3,0,1,0.626903|a,2,4,0,1,0.192296|a,2,5,0,1,0.672824|a,2,6,0,1,0.0842924|a,2,7,0,1,0.440373|a,0,0,1,1,0.243549|a,0,1,1,1,0.815974|a,0,2,1,1,-0.480682|a,0,3,1,1,-0.936048|a,0,4,1,1,0.150205|a,0,5,1,1,0.235724|a,0,6,1,1,0.72824|a,0,7,1,1,0.877557|a,1,0,1,1,0.817636|a,1,1,1,1,-0.962802|a,1,2,1,1,0.0274634|a,1,3,1,1,-0.016905|a,1,4,1,1,-0.202598|a,1,5,1,1,-0.566835|a,1,6,1,1,0.88174|a,1,7,1,1,0.392476|a,2,0,1,1,-0.581408|a,2,1,1,1,-0.765784|a,2,2,1,1,0.563662|a,2,3,1,1,0.827903|a,2,4,1,1,-0.191895|a,2,5,1,1,0.040923|a,2,6,1,1,-0.635639|a,2,7,1,1,-0.24496|a,3,0,1,1,-0.61746|a,3,1,1,1,-0.0393845|a,3,2,1,1,0.780339|a,3,3,1,1,-0.066931|a,3,4,1,1,-0.787911|a,3,5,1,1,0.825121|a,3,6,1,1,0.191666|a,3,7,1,1,-0.275942|a,4,0,1,1,-0.311167|a,4,1,1,1,0.555985|a,4,2,1,1,-0.11868|a,4,3,1,1,-0.232224|a,4,4,1,1,-0.474837|a,4,5,1,1,-0.237618|a,4,6,1,1,0.200247|a,4,7,1,1,0.291067|a,5,0,1,1,0.69871|a,5,1,1,1,-0.363736|a,5,2,1,1,-0.118792|a,5,3,1,1,-0.699657|a,5,4,1,1,-0.745813|a,5,5,1,1,-0.317815|a,5,6,1,1,-0.172175|a,5,7,1,1,0.132135|a,6,0,1,1,0.538564|a,6,1,1,1,-0.328279|a,6,2,1,1,-0.635087|a,6,3,1,1,-0.763708|a,6,4,1,1,0.508941|a,6,5,1,1,0.635746|a,6,6,1,1,-0.838574|a,6,7,1,1,-0.550818|a,7,0,1,1,0.331621|a,7,1,1,1,0.96629|a,7,2,1,1,-0.097729|a,7,3,1,1,-0.291571|a,7,4,1,1,-0.524047|a,7,5,1,1,0.871987|a,7,6,1,1,0.48579|a,7,7,1,1,-0.324431|a,0,0,2,1,0.113719|a,0,1,2,1,0.0220855|a,1,0,2,1,-0.564075|a,1,1,2,1,0.477265|a,2,0,2,1,0.174063|a,2,1,2,1,-0.707682|a,3,0,2,1,-0.889742|a,3,1,2,1,-0.489757|a,4,0,2,1,0.835303|a,4,1,2,1,-0.983648|a,5,0,2,1,-0.0190488|a,5,1,2,1,-0.82335|a,6,0,2,1,0.0851758|a,6,1,2,1,-0.691977|a,7,0,2,1,-0.482943|a,7,1,2,1,-0.24103|c,0,0,0,10");

  // 3
  // return new Genome("<MetaData>|a,0,0,0,0,0.420063|a,0,1,0,0,0.687784|a,0,2,0,0,-0.254708|a,0,3,0,0,0.718846|a,0,4,0,0,-0.453164|a,0,5,0,0,0.334362|a,0,6,0,0,-0.162064|a,0,7,0,0,-0.408915|a,0,8,0,0,0.232438|a,0,9,0,0,0.191498|a,0,10,0,0,0.685312|a,0,11,0,0,-0.983362|a,0,12,0,0,0.612766|a,0,13,0,0,0.431219|a,0,14,0,0,0.0483559|a,0,15,0,0,0.379093|a,1,0,0,0,-0.773392|a,1,1,0,0,0.583053|a,1,2,0,0,-0.00519792|a,1,3,0,0,-0.452463|a,1,4,0,0,-0.393087|a,1,5,0,0,-0.973426|a,1,6,0,0,0.620525|a,1,7,0,0,0.379932|a,1,8,0,0,0.778292|a,1,9,0,0,-0.655444|a,1,10,0,0,-0.37295|a,1,11,0,0,-0.0206714|a,1,12,0,0,0.67408|a,1,13,0,0,-0.879565|a,1,14,0,0,0.955905|a,1,15,0,0,-0.661512|a,2,0,0,0,-0.673464|a,2,1,0,0,-0.0543843|a,2,2,0,0,-0.754413|a,2,3,0,0,-0.0345751|a,2,4,0,0,-0.692485|a,2,5,0,0,-0.706441|a,2,6,0,0,0.211662|a,2,7,0,0,0.584657|a,2,8,0,0,0.360824|a,2,9,0,0,-0.114418|a,2,10,0,0,0.0946332|a,2,11,0,0,0.71085|a,2,12,0,0,0.101175|a,2,13,0,0,-0.000502881|a,2,14,0,0,-0.767482|a,2,15,0,0,0.48562|a,3,0,0,0,0.0984926|a,3,1,0,0,-0.708502|a,3,2,0,0,-0.75134|a,3,3,0,0,0.66341|a,3,4,0,0,0.753482|a,3,5,0,0,-0.429575|a,3,6,0,0,-0.610176|a,3,7,0,0,-0.160742|a,3,8,0,0,0.237906|a,3,9,0,0,-0.249248|a,3,10,0,0,-0.476208|a,3,11,0,0,-0.680952|a,3,12,0,0,0.143501|a,3,13,0,0,0.99656|a,3,14,0,0,0.663586|a,3,15,0,0,0.288387|a,0,0,1,0,-0.896273|a,0,1,1,0,-0.620004|a,1,0,1,0,0.11342|a,1,1,1,0,-0.247006|a,2,0,1,0,0.611123|a,2,1,1,0,0.492562|a,3,0,1,0,0.395304|a,3,1,1,0,0.397961|a,4,0,1,0,-0.274379|a,4,1,1,0,0.798957|a,5,0,1,0,0.00573515|a,5,1,1,0,0.379439|a,6,0,1,0,0.267684|a,6,1,1,0,0.0606665|a,7,0,1,0,0.542254|a,7,1,1,0,-0.327419|a,8,0,1,0,0.753362|a,8,1,1,0,0.065275|a,9,0,1,0,-0.252295|a,9,1,1,0,0.876419|a,10,0,1,0,-0.322335|a,10,1,1,0,0.509585|a,11,0,1,0,0.583369|a,11,1,1,0,0.360204|a,12,0,1,0,-0.629581|a,12,1,1,0,0.807533|a,13,0,1,0,0.611083|a,13,1,1,0,-0.102697|a,14,0,1,0,-0.866454|a,14,1,1,0,0.446801|a,15,0,1,0,0.130621|a,15,1,1,0,-0.725702|a,0,0,0,1,-0.705059|a,0,1,0,1,-0.400663|a,0,2,0,1,0.828877|a,0,3,0,1,0.495542|a,0,4,0,1,-0.702805|a,0,5,0,1,-0.741277|a,0,6,0,1,-0.439714|a,0,7,0,1,-0.951277|a,1,0,0,1,0.731709|a,1,1,0,1,0.724626|a,1,2,0,1,-0.357059|a,1,3,0,1,0.734806|a,1,4,0,1,0.106521|a,1,5,0,1,-0.0507688|a,1,6,0,1,-0.0522294|a,1,7,0,1,-0.553966|a,2,0,0,1,0.704914|a,2,1,0,1,-0.641194|a,2,2,0,1,-0.909526|a,2,3,0,1,0.854322|a,2,4,0,1,0.0279263|a,2,5,0,1,-0.00224918|a,2,6,0,1,0.602108|a,2,7,0,1,0.802572|a,0,0,1,1,0.574148|a,0,1,1,1,0.750956|a,0,2,1,1,0.743418|a,0,3,1,1,0.909897|a,0,4,1,1,0.860331|a,0,5,1,1,0.541208|a,0,6,1,1,0.927959|a,0,7,1,1,0.214636|a,1,0,1,1,-0.220771|a,1,1,1,1,-0.885999|a,1,2,1,1,-0.0656932|a,1,3,1,1,-0.31381|a,1,4,1,1,0.0107128|a,1,5,1,1,0.141583|a,1,6,1,1,-0.153198|a,1,7,1,1,0.648195|a,2,0,1,1,-0.690531|a,2,1,1,1,0.223762|a,2,2,1,1,0.0904804|a,2,3,1,1,-0.538517|a,2,4,1,1,0.0429317|a,2,5,1,1,0.389862|a,2,6,1,1,0.426795|a,2,7,1,1,-0.602887|a,3,0,1,1,0.637885|a,3,1,1,1,-0.718464|a,3,2,1,1,0.397987|a,3,3,1,1,-0.948623|a,3,4,1,1,-0.715462|a,3,5,1,1,-0.466921|a,3,6,1,1,0.555468|a,3,7,1,1,0.297163|a,4,0,1,1,-0.693994|a,4,1,1,1,0.333247|a,4,2,1,1,-0.944981|a,4,3,1,1,-0.370329|a,4,4,1,1,0.460053|a,4,5,1,1,0.567059|a,4,6,1,1,0.532447|a,4,7,1,1,0.659179|a,5,0,1,1,0.40689|a,5,1,1,1,-0.223698|a,5,2,1,1,-0.667279|a,5,3,1,1,0.201002|a,5,4,1,1,0.68588|a,5,5,1,1,0.94219|a,5,6,1,1,0.904021|a,5,7,1,1,0.42732|a,6,0,1,1,-0.733037|a,6,1,1,1,-0.196551|a,6,2,1,1,-0.426478|a,6,3,1,1,0.392529|a,6,4,1,1,0.571455|a,6,5,1,1,-0.707659|a,6,6,1,1,0.977278|a,6,7,1,1,-0.446584|a,7,0,1,1,-0.0578446|a,7,1,1,1,0.569044|a,7,2,1,1,-0.807206|a,7,3,1,1,-0.678672|a,7,4,1,1,-0.524861|a,7,5,1,1,-0.991814|a,7,6,1,1,0.92717|a,7,7,1,1,0.216915|a,0,0,2,1,0.272227|a,0,1,2,1,0.39759|a,1,0,2,1,-0.315266|a,1,1,2,1,0.505921|a,2,0,2,1,-0.92353|a,2,1,2,1,0.669598|a,3,0,2,1,0.595113|a,3,1,2,1,-0.0730971|a,4,0,2,1,-0.829031|a,4,1,2,1,0.654961|a,5,0,2,1,0.173989|a,5,1,2,1,0.608515|a,6,0,2,1,0.278335|a,6,1,2,1,-0.142146|a,7,0,2,1,0.370311|a,7,1,2,1,0.318048|c,0,0,0,10");


   // Genome* g = new Genome("<MetaData>|a,0,0,0,0,0.420063|a,0,1,0,0,0.687784|a,0,2,0,0,-0.254708|a,0,3,0,0,0.718846|a,0,4,0,0,-0.453164|a,0,5,0,0,0.334362|a,0,6,0,0,-0.162064|a,0,7,0,0,-0.408915|a,0,8,0,0,0.232438|a,0,9,0,0,0.191498|a,0,10,0,0,0.685312|a,0,11,0,0,-0.983362|a,0,12,0,0,0.612766|a,0,13,0,0,0.431219|a,0,14,0,0,0.0483559|a,0,15,0,0,0.379093|a,1,0,0,0,-0.773392|a,1,1,0,0,0.583053|a,1,2,0,0,-0.00519792|a,1,3,0,0,-0.452463|a,1,4,0,0,-0.393087|a,1,5,0,0,-0.973426|a,1,6,0,0,0.620525|a,1,7,0,0,0.379932|a,1,8,0,0,0.778292|a,1,9,0,0,-0.655444|a,1,10,0,0,-0.37295|a,1,11,0,0,-0.0206714|a,1,12,0,0,0.67408|a,1,13,0,0,-0.879565|a,1,14,0,0,0.955905|a,1,15,0,0,-0.661512|a,2,0,0,0,-0.673464|a,2,1,0,0,-0.0543843|a,2,2,0,0,-0.754413|a,2,3,0,0,-0.0345751|a,2,4,0,0,-0.692485|a,2,5,0,0,-0.706441|a,2,6,0,0,0.211662|a,2,7,0,0,0.584657|a,2,8,0,0,0.360824|a,2,9,0,0,-0.114418|a,2,10,0,0,0.0946332|a,2,11,0,0,0.71085|a,2,12,0,0,0.101175|a,2,13,0,0,-0.000502881|a,2,14,0,0,-0.767482|a,2,15,0,0,0.48562|a,3,0,0,0,0.0984926|a,3,1,0,0,-0.708502|a,3,2,0,0,-0.75134|a,3,3,0,0,0.66341|a,3,4,0,0,0.753482|a,3,5,0,0,-0.429575|a,3,6,0,0,-0.610176|a,3,7,0,0,-0.160742|a,3,8,0,0,0.237906|a,3,9,0,0,-0.249248|a,3,10,0,0,-0.476208|a,3,11,0,0,-0.680952|a,3,12,0,0,0.143501|a,3,13,0,0,0.99656|a,3,14,0,0,0.663586|a,3,15,0,0,0.288387|a,0,0,1,0,-0.896273|a,0,1,1,0,-0.620004|a,1,0,1,0,0.11342|a,1,1,1,0,-0.247006|a,2,0,1,0,0.611123|a,2,1,1,0,0.492562|a,3,0,1,0,0.395304|a,3,1,1,0,0.397961|a,4,0,1,0,-0.274379|a,4,1,1,0,0.798957|a,5,0,1,0,0.00573515|a,5,1,1,0,0.379439|a,6,0,1,0,0.267684|a,6,1,1,0,0.0606665|a,7,0,1,0,0.542254|a,7,1,1,0,-0.327419|a,8,0,1,0,0.753362|a,8,1,1,0,0.065275|a,9,0,1,0,-0.252295|a,9,1,1,0,0.876419|a,10,0,1,0,-0.322335|a,10,1,1,0,0.509585|a,11,0,1,0,0.583369|a,11,1,1,0,0.360204|a,12,0,1,0,-0.629581|a,12,1,1,0,0.807533|a,13,0,1,0,0.611083|a,13,1,1,0,-0.102697|a,14,0,1,0,-0.866454|a,14,1,1,0,0.446801|a,15,0,1,0,0.130621|a,15,1,1,0,-0.725702|c,0,0,0,10");


   // int network = 1;

   // sizes2.insert(sizes2.begin(), 3);
   // sizes2.push_back(2);

   // int layer = 0;
   // for (unsigned int i = 0; i < sizes2[layer]; i++) {
   //     for (unsigned int j = 0; j < sizes2[layer+1]; j++) {
   //         double w = pmRandf(1);
   //         g->addGene(new AxonGene(i, j, layer, network, w));
   //     }
   // }

   // layer = 1;
   // for (unsigned int i = 0; i < sizes2[layer]; i++) {
   //     for (unsigned int j = 0; j < sizes2[layer]; j++) {
   //         double w = pmRandf(1);
   //         g->addGene(new AxonGene(i, j, layer, network, w));
   //     }
   // }

   // layer = 2;
   // for (unsigned int i = 0; i < sizes2[layer - 1]; i++) {
   //     for (unsigned int j = 0; j < sizes2[layer]; j++) {
   //         double w = pmRandf(1);
   //         g->addGene(new AxonGene(i, j, layer, network, w));
   //     }
   // }

   // return g;
}

RecurEyeWalker::RecurEyeWalker(const Genome& genome) :
        Creature(genome), head(nullptr), body(nullptr),
        motorCortex(0, genome.getGenes<AxonGene>()), visualCortex(1, genome.getGenes<AxonGene>()),
        eye(sight_distance) {
    for (auto const& gene: genome.getGenes<CubeGene>()) {
        this->body = new Cube(*gene);
    }

    lowerToGround();
    centerCOM();
    initCOM = getCOM();
    this->head = &this->body->position;
}


RecurEyeWalker::~RecurEyeWalker() {
    delete this->body;
}

#include "Eye.h"
RecurEyeWalker::RecurEyeWalker(const RecurEyeWalker &other):
        Creature(other), head(nullptr), body(nullptr),
        motorCortex(other.motorCortex), visualCortex(other.visualCortex), eye(other.eye) {
    this->body = new Cube(*body);
    this->head = &this->body->position;
}

void RecurEyeWalker::draw(const Scenario* scenario) const {
    DrawCylinder<Appearance::BLUE>(
		Vec(body->position.x, body->position.y, this->getLowestBodyHeight()),
  		body->position + Vec(0, 0, body->length/2),
  		1
  	);
    Vec averageP = Vec(0, 0, 0);
    for (const auto& v: this->positions.getPoints()) {
        averageP += v;
    }
    averageP /= this->positions.size();
    const Vec averageV = -(this->positions[this->positions.size() - 1] - this->positions.getPoints()[0]);
    DrawSphere<Appearance::FACE>(*head + Vec(0,0,8), 5,
        180.0/3.1415926*atan2(averageV.y, averageV.x) - 90
    );
    eye.draw(averageP, averageV, MAX_PROCESS);

    scenario->terrain.draw();

    double distanceFromGround = this->getLowestBodyHeight() - scenario->terrain.getHeight(this->getCOM());
    constexpr double error = 1;

    //     DrawRing<Appearance::WHITE>(Vec(
    // this->creature->getCOM().x,
    // this->creature->getCOM().y,
    // this->creature->getLowestBodyHeight() + 5
    // ), 5, 0.5);
    if (distanceFromGround < error) {
        DrawSphere<Appearance::WHITE>(this->getCOM() - Vec(0, 0, 2) + 3*averageV.getUnit(), 3);
        DrawSphere<Appearance::WHITE>(this->getCOM() - Vec(0, 0, 2) - 3*averageV.getUnit(), 3);
    } else {
        DrawSphere<Appearance::RED>(this->getCOM() - Vec(0, 0, 2) + 3*averageV.getUnit(), 3);
        DrawSphere<Appearance::RED>(this->getCOM() - Vec(0, 0, 2) - 3*averageV.getUnit(), 3);
    }

    DrawCylinder<Appearance::WHITE>(
        averageP+Vec(0, 0, 20),
        averageP+Vec(0, 0, 20)-50*(averageV).getUnit(),
        1
    );
}

void RecurEyeWalker::drawBrain(const bool drawLines) const {
    this->visualCortex.draw(drawLines);
    // this->motorCortex.draw(drawLines);
}


Vec RecurEyeWalker::calculateCOM() const {
    Vec COM = Vec(0,0,0);
    double mass = 0.0;

    COM += body->position * body->mass;
    mass += body->mass;

    if (mass < 0.000000001) return Vec(0,0,0);
    return COM / mass;
}


void RecurEyeWalker::moveCOMTo(Vec to) {
    Vec COM = getCOM();
    Vec dr = to - COM;
    body->position += dr;
}

void RecurEyeWalker::lowerToGround() {
    double dz = this->getLowestBodyHeight() - 1; //-1 for not embeding creatures/padding
    body->position.z -= dz;
}

double RecurEyeWalker::getLowestBodyHeight() const {
    double minHeight = std::numeric_limits<double>::max();
    double lowestPart = body->position.z - body->length / 2;
    minHeight = lowestPart < minHeight  ? lowestPart : minHeight ;
    return minHeight;
}

Vec RecurEyeWalker::getTop(const double offset=0) const {
    double highestNode = -std::numeric_limits<double>::max();
    double comX = 0;
    double comY = 0;

    double mass = 0.0;
    highestNode = body->position.z > highestNode ? body->position.z : highestNode;
    comX += body->position.x * body->mass;
    comY += body->position.y * body->mass;
    mass += body->mass;
    return Vec(comX / mass, comY / mass, highestNode + offset);
}

#include <iostream>
#include <fstream>

void RecurEyeWalker::update(Scenario* scenario, int t) {
    constexpr double dt = 0.05;
    if ((t % 100 == 0) && (t < 1'000'000)) {
        std::ofstream myfile;
      myfile.open ("positions.txt", std::ios::app);
      myfile << this->getCOM() <<'\n';
      myfile.close();
    }
    if (t == 0) {
        this->moveTo = Vec(pmRandf(100, 101) + 0*pmRandf(100, 200), 0*pmRandf(70, 100), 0);
        this->moveTo.z = terrain.getHeight(this->moveTo);

        this->moveCOMTo(Vec(1, 1, terrain.getHeight(1, 1) + 50));

        this->positions.clear();
        this->initCOM = this->calculateCOM();
    }
    this->Creature::update(scenario, t);

    /* Brain Processing */
    Vec averageP = Vec(0, 0, 0);
    for (const auto& v: this->positions.getPoints()) {
        averageP += v;
    }
    averageP /= this->positions.size();//std::accumulate(this->positions.getPoints().begin(), this->positions.getPoints().end(), Vec(0, 0, 0)) / this->positions.size();

    const Vec averageV = -(this->positions[this->positions.size() - 1] - this->positions.getPoints()[0]);
    const Vec red   = averageV;
    const Vec blue  = -(this->moveTo - averageP + averageV);
    Vec green = (this->moveTo - averageP);
    const double sign = sgn(red.y*green.x - red.x*green.y); // xprod
    double angle = sign * atan2(red.cross(blue).length(), red.dot(blue)) / PI;

    std::vector<double> inputs = {-1};
    inputs.push_back(angle);
    inputs.push_back(tanh(0.01*green.length()));
    inputs.push_back(tanh(0.05*averageV.length()));

    Vec para = averageV;  // Signs chosen for +1 forward/right
    Vec perp = averageV.cross(Vec(0, 0, 1));
    para = para.length() < 1e-8 ? Vec(0, 1, 0) : para / para.length();
    perp = perp.length() < 1e-8 ? Vec(0, 1, 0) : perp / perp.length();

    /* Gravity */
    const Vec gravity = 0.2 * Vec(0, 0, -1);
    this->body->acceleration = gravity;

    /* Drag */
    const Vec drag = 0.0001*averageV.lengthSquare() * para;
    body->acceleration += drag;

    /* Ground Contact Forces */
    double distanceFromGround = this->getLowestBodyHeight() - scenario->terrain.getHeight(this->getCOM());
    constexpr double error = 1;

    this->eye.look(averageP, averageV, scenario->food.getFrom(this->body->position.x, this->body->position.y, 2));

    //1, averageV.length()/4.
    std::deque<std::vector<double>> visualInputs = {};
    int max_process = this->MAX_PROCESS;
    for (const auto& object: this->eye.seeing) {
        visualInputs.push_back({object.angle / PI, object.distance / this->eye.sight, 1});
        if (!--max_process) {
          break;
        }
    }
    // std::sort(visualInputs.begin(), visualInputs.end(), [](const std::vector<double>& inputA, const std::vector<double>& inputB) {
    //     return inputA[1] < inputB[1];
    // });

    std::vector<double> dmoveTo = this->visualCortex.propagate(visualInputs);
    angle = 0.015*dmoveTo[0];
    green = green.getUnit();
    double x = 200*fabs(dmoveTo[1])*(green.x * cos(angle) - green.y * sin(angle));
    double y = 200*fabs(dmoveTo[1])*(green.x * sin(angle) + green.y * cos(angle));
    this->moveTo = Vec(x + averageP.x, y + averageP.y, scenario->terrain.getHeight(x + averageP.x, y + averageP.y));

    if (distanceFromGround < error) {
        const double strength = 0.6;

        std::vector<double> da = this->motorCortex.propagate(inputs);
        assert(da.size() == 2);
        this->body->acceleration += strength*(da[0]*perp + da[1]*para) / body->velocity.length();

        if (distanceFromGround < 1e-4) {
            /* Normal Force */
            double C = 0.2;
            Vec v1 = body->velocity;
            Vec v2 = Vec(0, 0, 0);
            Vec N = scenario->terrain.getNormal(this->getCOM());
            body->velocity += -2 * C * (v1 - v2).dot(N) * N;
            body->position.z = scenario->terrain.getHeight(this->body->position) +
                                    (this->body->position.z - this->getLowestBodyHeight()) + 1e-4;

            /* Friction */
            body->velocity *= (1 - 0.03 * dt);
        }
    }
    body->velocity += body->acceleration * dt;
    body->position += body->velocity * dt;
}


std::string RecurEyeWalker::getGenomeString() const {
    std::string genomeString = Creature::getGenomeString();
    genomeString += Gene::toStringFormat(std::vector<std::string>({std::string(1, CubeGene::symbol),
        utility::numToStr<double>(body->position.x),
        utility::numToStr<double>(body->position.y),
        utility::numToStr<double>(body->position.z),
        utility::numToStr<double>(body->mass)
    }));
    return genomeString;
}




